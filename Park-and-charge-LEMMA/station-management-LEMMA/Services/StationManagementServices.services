import technology from "../../technology/common.technology" as java
import datatypes from "../domain/station-management-domain.data" as banking

@technology(java)
@sync(java::_protocols.rest)
@endpoints(
    java::_protocols.rest: "/api";
)
architecture functional microservice com.DevMatrix.StationManagementService {
    
    // Address Management Interface
    @endpoints(java::_protocols.rest: "/Addresses";)
    interface AddressManagement {

    --- 
    Create an address.
    ---
    @endpoints(java::_protocols.rest: "/Create";)
    createAddress(
        sync in addressData : station::v1.StationManagement.Address,
        sync out createdAddress : station::v1.StationManagement.Address
    );

    --- 
    Update or create an address.
    ---
    @endpoints(java::_protocols.rest: "/Update/isEdit/{isEdit}";)
    updateLocation(
        sync in isEdit : boolean,
        sync in id? : long,
        sync in addressData : station::v1.StationManagement.Address,
        sync out updatedAddress : station::v1.StationManagement.Address
    );

    ---
    Retrieve address by ID.
    ---
    @endpoints(java::_protocols.rest: "/GetData/{id}";)
    getData(
        sync in id : long,
        sync out address : station::v1.StationManagement.Address
    );

    ---
    Get all addresses.
    ---
    @endpoints(java::_protocols.rest: "/GetAll";)
    getAll(
        sync out addresses : station::v1.StationManagement.Addresses
    );

    ---
    Delete an address by ID.
    ---
    @endpoints(java::_protocols.rest: "/Delete/{id}";)
    delete(
        sync in id : long
    );
}

    
    // Charging Station Management Interface
@endpoints(java::_protocols.rest: "/ChargingStations";)
interface ChargingStationManagement {

    --- 
    Get all charging stations for the logged-in user.
    @required authToken Authorization token (from header).
    ---
    @endpoints(java::_protocols.rest: "/GetAll";)
    getAll(
        sync in authToken : string,
        sync out stations : station::v1.StationManagement.ChargingStations
    );

    --- 
    Get a charging station by ID.
    ---
    @endpoints(java::_protocols.rest: "/GetStation/StationId/{stationId}";)
    getStationById(
        sync in stationId : long,
        sync out chargingStation : station::v1.StationManagement.ChargingStation
    );

    --- 
    Create or update a charging station based on isEdit flag.
    ---
    @endpoints(java::_protocols.rest: "/UpdateStation/isEdit/{isEdit}";)
    updateChargingStation(
        sync in isEdit : boolean,
        sync in stationId? : long,
        sync in stationData : station::v1.StationManagement.ChargingStation,
        sync in authToken : string,
        sync out updatedStation : station::v1.StationManagement.ChargingStation,
        sync out fault errorCode : int
    );

    --- 
    Update a charging station by ID.
    ---
    @endpoints(java::_protocols.rest: "/UpdateStation/StationId/{stationId}";)
    updateStation(
        sync in stationId : long,
        sync in stationData : station::v1.StationManagement.ChargingStation,
        sync out updatedStation : station::v1.StationManagement.ChargingStation
    );

    --- 
    Delete a charging station by ID.
    ---
    @endpoints(java::_protocols.rest: "/DeleteStation/{stationId}";)
    deleteStation(
        sync in stationId : long
    );

    --- 
    Get stations by user ID (direct input).
    ---
    @endpoints(java::_protocols.rest: "/GetByUserId";)
    getStationsByUserId(
        sync in userId : long,
        sync out stations : station::v1.StationManagement.ChargingStations
    );
}

    
    // Offer Slot Management Interface
@endpoints(java::_protocols.rest: "/OfferSlots";)
interface OfferSlotManagement {

    ---
    Get all offer slots.
    ---
    @endpoints(java::_protocols.rest: "/GetAll";)
    getAll(
        sync out offerSlots : station::v1.StationManagement.OfferSlots
    );

    ---
    Retrieve a specific offer slot by ID.
    ---
    @endpoints(java::_protocols.rest: "/GetOffer/OfferId/{slotId}";)
    getOfferById(
        sync in slotId : long,
        sync out offerSlot : station::v1.StationManagement.OfferSlot
    );

    ---
    Retrieve offer slots by station ID and date.
    @required stationId The station ID.
    @required slotDate The date for filtering.
    ---
    @endpoints(java::_protocols.rest: "/GetOfferByStation/station/{stationId}";)
    getOffersByStationAndDate(
        sync in stationId : long,
        sync in slotDate : date,
        sync out offerSlots : station::v1.StationManagement.OfferSlots
    );

    ---
    Create or update offer slots in batch.
    @required offerSlots The list of slots to be created/updated.
    ---
    @endpoints(java::_protocols.rest: "/CreateOrUpdate";)
    createOrUpdate(
        sync in offerSlots : station::v1.StationManagement.OfferSlots,
        sync out result : string,
        sync out fault errorCode : int
    );

    ---
    Update a single offer slot by ID.
    @required slotId ID of the slot.
    @required slotData Updated offer slot data.
    ---
    @endpoints(java::_protocols.rest: "/UpdateOffer/OfferId/{slotId}";)
    update(
        sync in slotId : long,
        sync in slotData : station::v1.StationManagement.OfferSlot,
        sync out fault errorCode : int
    );

    ---
    Delete an offer slot by ID.
    ---
    @endpoints(java::_protocols.rest: "/DeleteOffer/OfferId/{slotId}";)
    delete(
        sync in slotId : long
    );

    ---
    Get available offers by postal code.
    @required postalCode The postal code.
    ---
    @endpoints(java::_protocols.rest: "/GetAvailableOffer/postalcode/{postalCode}";)
    getAvailableOffer(
        sync in postalCode : string,
        sync out availableOffers : station::v1.StationManagement.OfferSlots
    );

    ---
    Get offer with station details by offer ID.
    ---
    @endpoints(java::_protocols.rest: "/GetOfferById/OfferId/{offerId}";)
    getOfferWithStationById(
        sync in offerId : long,
        sync out offerWithStation : station::v1.StationManagement.OfferSlot
    );
}
    
    // Internal Service Dependencies
    required microservices {
        userService: ExternalServices with RestTemplate::_protocols.http_client;
    }
    
    
    // Eureka Service Discovery Configuration
    deployment technology Eureka::_deployment.EurekaClient {
        service_name = "STATIONMANAGEMENTSERVICE";
        eureka_server_url = "http://eureka-server:8761/eureka";
        port = 8081;
    }
}


