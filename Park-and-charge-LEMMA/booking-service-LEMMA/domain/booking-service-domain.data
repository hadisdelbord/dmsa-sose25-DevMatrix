context BookingService {

    structure Booking<entity> {
        immutable long bookingId<identifier>,
        long userId,
        long offerId,
        BookingStatus bookingStatus
    }

    enum BookingStatus {
        PENDING("RESERVED"),
        CONFIRMED("CONFIRMED"),
        CANCELLED("COMPLETED"),
        CANCELLED("CANCELLED"),
    }
     // === DTOs ===
    structure BookingViewDto<valueObject> {
        long bookingId,
        long userId,
        string stationName,
        string slotDate,
        string timeSlot,
        float pricePerSlot,
        string bookingStatus,
        double latitude,
        double longitude,
        float  powerOutput
    }
     
    structure BookingDto<valueObject> {
        long bookingId,
        long offerId,
        long userId,
        BookingStatus bookingStatus
    } 


    // === Collection ===
    collection BookingList { Booking booking }

    // === Repository ===
    structure BookingRepository<repository> {
        function BookingList findByUserId(long userId),
        function Booking findById(long id)
    }

    // === Application Service ===
    structure BookingService<applicationService> {
        function Booking createBooking(Booking booking),
        function Booking updateBooking(Booking booking),
        function void deleteBooking(long id),
        function Booking getBookingById(long id),
        function BookingList getBookingsByUser(long userId)
    }
}