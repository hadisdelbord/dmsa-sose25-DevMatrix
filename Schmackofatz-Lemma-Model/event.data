// Domain model for shared domain events between microservices
domain model EventModel {

    // Aggregate representing restaurant-related domain events
    Aggregate RestaurantEvents {

        // Domain Event to communicate the creation of a new restaurant
        DomainEvent RestaurantCreated {
            name: String // Name of the newly created restaurant
            menu: Menu // Menu of the newly created restaurant
        }

        // Entity representing the Menu, reused from RestaurantModel
        Entity Menu {
            items: List<MenuItem> // List of menu items included in the menu
        }

        // Entity representing an individual Menu Item
        Entity MenuItem {
            number: String // Unique number for selection
            name: String // Name of the dish or drink
            price: Decimal // Price of the item
        }
    }
}

// Using shared artifacts such as Domain Events (e.g., RestaurantCreated) promotes consistency 
// between services and reduces redundancy. However, it also increases coupling between 
// microservices, which may reduce their autonomy and complicate independent deployment 
// and evolution.
